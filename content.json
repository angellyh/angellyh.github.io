{"meta":{"title":"Liyinghao的博客","subtitle":"一只爱音乐偶尔有点小文艺的业余程序员","description":"广财13级。懂得各项前技能，目前主要使用python等进行各种爬虫、测试等开发，熟悉使用linux系统，掌握基本服务器知识。此为博客一枚。","author":"Yinghao Li","url":"http://angellyh.coding.me"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2016-10-26T07:12:59.152Z","updated":"2016-10-26T08:00:12.245Z","comments":true,"path":"posts/[object Object]/2016-10-26-hello-world.html","link":"","permalink":"http://angellyh.coding.me/posts/[object Object]/2016-10-26-hello-world.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","keywords":[],"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"编程习惯","slug":"编程","date":"2016-10-09T03:35:52.000Z","updated":"2016-10-26T08:08:17.438Z","comments":true,"path":"posts/[object Object]/2016-10-09-编程.html","link":"","permalink":"http://angellyh.coding.me/posts/[object Object]/2016-10-09-编程.html","excerpt":"养成编程的一些好习惯会让你和别人都变舒服编程就像写文章，如果你乱写一通，那不仅你自己回来看的时候觉得很别扭，别人看你的东西也会觉得一头雾水，正所谓字如其人，字好看又条理清楚的文章让人觉得作者是个不错的人，同理写得好且好看的程序也会让人对程序员产生好感 以下内容来自知乎以及平时自己的编程经验","keywords":[],"text":"养成编程的一些好习惯会让你和别人都变舒服编程就像写文章，如果你乱写一通，那不仅你自己回来看的时候觉得很别扭，别人看你的东西也会觉得一头雾水，正所谓字如其人，字好看又条理清楚的文章让人觉得作者是个不错的人，同理写得好且好看的程序也会让人对程序员产生好感 以下内容来自知乎以及平时自己的编程经验 遇到不清楚或不懂的知识点，先去看官方文档！ 先！去！看！官方！！文档！！！！ 很多官方文档是英文的，硬着头皮也要看！看着看着就习惯了。 刚开始读英文文档会费时间和精力，但是等你回过头来再看，你会觉得这才是最恰当的选择。 首先你的英文水平得到提升（这是程序员无法回避的问题），耐性得到锻炼。 其次，什么叫官方文档？！两个字：权威！准确！当你发现网上有些库的介绍是似是而非，似懂非懂的答案的，甚至有的文章观点完全不一样，你就会懂我在说什么了。 当然，我并没有否认网上有好的答案和文章，我自己也经常看别人的博客。 只是，作为初学者，你的水平很难去辨别一些文章，观点的好坏对错，而这可能会对你理解一些知识带来致命的误导！ 不要过分纠结于“怎样把代码写得更短”或者“把代码写进一行”。 比如写这种是想怎样······： 1print filter(lambda x: len(filter(lambda y: x % y == 0, xrange(2, int(sqrt(x) + 1)))) == 0, xrange(2, 100) 至少在同一个项目里，遵循统一的命名原则。 比如这种，顺手随便写的吧·····： 12345678class Test(object):...class ShuRuTest(Test):...class shuchu_ceshi(Test):... 如果有比较通用的广为接受的格式标准，请务必遵守。 比如python的pep8等诸如此类 代码较长时记得写好注释，整个项目写好文档。 几十行的小程序小脚本写个说明也好；几百几千行的不写注释维护起来太麻烦。最可恨是项目没文档，别说转手了，就自己过个小半年再来看都会想“这是什么鬼，怎么想不起来了”。 看看别人写的好的的源码是怎么写注释的，比如类的注释的格式和内容应该怎样 注释什么时候写？ 写代码之前写一部分，调试时候写一部分，写完代码之后补一部分。 写代码之前的：等于是你的提纲，也是后来人理解你代码的途径 调试时候的： //print tom.age 调试时候你打印的变量，可能是后来人改代码时的关键检查点，不要都删光，当然也不要太多，更不要不注释掉就那么留在代码里 写完功能后：对于不好理解的地方再补点注释，原则是后人改代码时候一眼就看清你的思路 顺便说一句，用英文写注释确实逼格很高，但是···对于英文不好的同学，就不要在注释里强秀英文了……过俩月就算有注释自己都看的吃力甚至看不懂了 尽量拆分函数功能及类，保证一个函数只做一件事，不要全堆一个函数里。 如果你一个函数写了几百行，一个函数六七重循环，那你真得想想该怎么改了···· 变量命名写清楚，不要p1,p2,p3这样的 保证代码的版本管理，每天结束工作 push remote 考虑好异常处理，无论用if还是try。 务必看懂错误提示。编译器（解释器）及运行时给出的错误提示务必看懂。常见的也就那么些个单词，就那么几项概念，看明白就不用带个错误提示满世界找人问“为什么出现这个错误”···对于这种我想说请稍稍记记常见的计算机英语单词，然后打开浏览器google好不好···· 就说这么多，以后想到了再补：）","categories":[],"tags":[{"name":"编程","slug":"programming","permalink":"http://angellyh.coding.me/tags/programming/"},{"name":"随笔","slug":"other","permalink":"http://angellyh.coding.me/tags/other/"}]}]}